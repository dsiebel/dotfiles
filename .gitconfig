[user]
  name = Your Name Here
  email = yourname@example.com

[alias]
  # svn-like shortcuts for common commands
  st = status
  ci = commit
  co = checkout
  br = branch
  df = diff
  cp = cherry-pick

  # clone a repository with all submodules
  c = clone --recursive

  # view status using short format
  s = status -s

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Commit all changes
  ca = !git add -A && git commit -av

  # pretty logging with branches and everything!
  l = log --pretty=oneline -n 20 --graph --abbrev-commit
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  logp = log -p

  # verbose outputs
  branches = branch -av
  tags = tag -l
  remotes = remote -v

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # clean up local, merged branches
  cleanup = "!git branch --merged | grep -v master | xargs -n 1 git branch -d"
  
  # cleanup remote, merged branches (origin only)
  # for older git versions
  # cleanup-remote = "!git branch -r --merged | grep master | sed 's/origin\//:/' | args -n 1 git push origin"
  cleanup-remote = "!git branch -r --merged | grep -v "master" | sed 's/origin\\///' | args -n 1 git push --delete origin"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

[core]

  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # set vim as default editor
  editor = vim

[push]

  # Use the Git 1.x.x default to avoid errors on machines with old Git
  # installations. To use `simple` instead, add this to your `~/.extra` file:
  # `git config --global push.default simple`. See http://git.io/mMah-w.
  # default = matching

  default = simple

[merge]

  # Include summaries of merged commits in newly created merge commit messages
  log = true

	# Always show a diffstat at the end of a merge
  stat = true

	# External merge tool.
	tool = Kaleidoscope
	# tool = diffmerge

[mergetool]
	
	#keepBackup = false
	prompt = false

[diff]

	# External diff tool.
	#tool = diffmerge
	tool = Kaleidoscope

[svn]

  rmdir = true

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto
	diff = auto
  status = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

# Diff and merge tool configuration for "sourcetree" (osx)
[difftool "sourcetree"]

  cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh $LOCAL $REMOTE

[mergetool "sourcetree"]

  cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh $LOCAL $REMOTE -ancestor $BASE -merge $MERGED
  trustExitCode = true

# Diff and merge tool configuration for "diffmerge" (osx)
[difftool "diffmerge"]

  cmd = /Applications/DiffMerge.app/Contents/Resources/diffmerge $LOCAL $REMOTE

[mergetool "diffmerge"]

  cmd = /Applications/DiffMerge.app/Contents/Resources/diffmerge --merge --result=$MERGED $LOCAL $BASE $REMOTE[mergetool "Kaleidoscope"]

	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[difftool]
	prompt = false
[mergetool "Kaleidoscope"]
	trustexitcode = true
    cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot

[credential]
    helper = osxkeychain

