[alias]
  br = branch
  branches = branch -av

  # git change-commits GIT_COMMITTER_NAME "old name" "new name"
  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "

  ci = commit

  # clean up local, merged branches
  cleanup = "!git branch --merged | grep -v master | xargs -n 1 git branch -d"

  # cleanup remote, merged branches (origin only)
  # for older git versions
  # cleanup-remote = "!git branch -r --merged | grep master | sed 's/origin\//:/' | args -n 1 git push origin"
  cleanup-remote = "!git branch -r --merged | grep -v "master" | sed 's/origin\\///' | args -n 1 git push --delete origin"

  co = checkout
  contributors = shortlog --summary --numbered
  cp = cherry-pick
  df = diff

  lg = "!echo 'use `glol` or `glod` instead!'"
  logp = "!echo 'use `glgp` instead!'"

  remotes = remote -v

  # from https://help.github.com/articles/remove-sensitive-data
  remove-file = "!f() { git filter-branch -f --index-filter \"git rm --cached --ignore-unmatch $1\" --prune-empty --tag-name-filter cat -- --all; }; f "

  # view status using short format
  s = status -s

  st = status
  tags = tag -l
  undo = reset HEAD~1 --mixed

  # git pull with some defaults
  up = pull --no-rebase --stat --autostash
  reup = pull --rebase --stat --autostash
  ffup = pull --ff-only --stat --autostash

  # Show the diff of everything you haven't pushed yet
  unpushed = "!f() { b=\"$(git rev-parse --abbrev-ref HEAD)\"; git diff \"origin/${b}..HEAD\"; }; f "

  # find the top level of current repository
  top = rev-parse --show-toplevel

  # Skaffold-like build tag for e.g. use as container image tag
  id = describe --tags --dirty --always

  # Written by Corey Haines
  # Scriptified by Gary Bernhardt
  # Put into git alias by Dominik Siebel
  #
  # List churn (edits-over time) to identify where the most time is being spent.
  # Idea: https://youtu.be/7hL6g1aTGvo?t=16m53s
  #
  # Show churn for whole repo:
  #   $ git churn
  #
  # Show churn for specific directories:
  #   $ git churn app lib
  #
  # Show churn for a time range:
  #   $ git churn --since='1 month ago'
  #
  # (These are all standard arguments to `git log`.)
  churn = !git log --all -M -C --name-only --format='format:' "$@" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print "count,file"} {print $1 "," $2}'

[branch]
  autoSetupRebase = always

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto
  diff = auto
  pager = true
  status = auto
  branch = auto
  interactive = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  commit = 227 bold
  frag = magenta bold
  meta = 227
  new = green bold
  old = red bold
  whitespace = red reverse

[color "diff-highlight"]
  newHighlight = green bold 22
  newNormal = green bold
  oldHighlight = red bold 52
  oldNormal = red bold

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[commit]
  # Ensures all commits are signed for improved security and author verification
  gpgsign = true
  # Shows diff of changes, by file, at the bottom of the commit message
  verbose = true

[core]
  # Use only the first 12 characters of a commit SHA instead of the full 40 characters
  abbrev = 12
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Tells Git where to look for my Dotfiles managed Git Hooks XDG configuration
  # FIXME: disabled, because it clashies with pre-commit
  # see also: https://github.com/pre-commit/pre-commit/issues/1198
  # hooksPath = ~/.config/git/hooks

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # set system editor as default editor
  editor = $EDITOR

  ignorecase = false

  # Use git-delta for proper pagination and syntax highlighting
  pager = delta

  whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol

[credential]
  helper = osxkeychain

[delta]
  commit-decoration-style = bold yellow box ul
  file-style = bold yellow ul
  hunk-header-decoration-style = yellow box
  line-numbers = true
  minus-color = "#340001"
  navigate = true  # use n and N to move between diff sections
  plus-color = "#012800"
  side-by-side = true
  whitespace-error-style = 22 reverse

[diff]
  algorithm = histogram
  colorMoved = default
  indentHeuristic = true
  mnemonicprefix = true
  renames = copies
  srcPrefix = before

[difftool]
  prompt = false

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  required = true
  process = git-lfs filter-process

[fetch]
  prune = true
  pruneTags = true
  writeCommitGraph = true

[gpg]
  format = ssh

[gpg "ssh"]
  program = "/Applications/1Password.app/Contents/MacOS/op-ssh-sign"

[grep]
  column = true
  fullname = true
  lineNumber = true

[help]
  autocorrect = 30

[init]
  defaultBranch = main

[interactive]
  # Ensures Delta is used to handle the diff filter for interactive commands
  diffFilter = delta --color-only
  # Ensures only a single key is used without having to hit enter for interactive commands
  singleKey = true

[maintenance]
  auto = false
  strategy = incremental

[merge]
  # See what is on HEAD, what is common, and what is local
  conflictstyle = zdiff3
  # Ensures no extra commit is made when merging
  ff = only
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  # Always show a diffstat at the end of a merge
  stat = true

[mergetool]
  prompt = false

[notes]
  # Ensures notes are not lost when rebasing
  rewriteRef = refs/notes/commits

[pack]
  # Ensures bitmaps are used for improved index traversal performance.
  useBitmapBoundaryTraversal = true

[pull]
  # Enforces a Git Rebase workflow instead of the default merge workflow when pulling.
  rebase = merges
  default = current

[push]
  # Assume that the current branch is set upstream (i.e. same name as branch)
  autoSetupRemote = true
  default = simple

  # Ensures you can’t force push changes to remote branch if commit history doesn’t have same parent.
  # This is extremely handy for preventing obliteration of remote changes if the histories don’t align
  # especially in rare cases your local branch managed to get misaligned with the remote branch.
  # useForceIfIncludes = true

[rebase]
  # Ensures each rebase automatically moves fixup!, squash!, and amend! commits
  # to their corresponding commit for reduced manual labor
  autoSquash = true
  # Ensures untracked, modified, or staged files are automatically pushed
  # onto the stash before a rebase and auto-popped after the rebase completes.
  autoStash = true

  # Ensures any branches, which references the same commits, are automatically
  # rebased along with the current branch being rebased.
  updateRefs = true

[rerere]
  # Ensures the rerere cache is automatically updated when resolving
  # a rebase conflict for improved rebase speed.
  autoUpdate = true
  # Ensures Reuse Recorded Resolution (rerere) is enabled for an improved
  # rebase workflow so you can reduce the number of times you have to resolve
  # the same conflict when rebasing multiple times.
  enabled = true

[status]
  # Ensures all untracked files in all directories are shown.
  showUntrackedFiles = all

[tag]
  # Ensures tags are always cryptographically signed like commits
  gpgSign = true
  # Ensures repository tags are sorted by version.
  sort = version:refname

[url "ssh://git@github.com/"]
  insteadOf = https://github.com/

[user]
  name = Dominik Siebel
  email = dominik.siebel@trivago.com
  signingkey = ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICH7LJ5wAIWlKhsOgmkAC5E2s7A7Bs7+etEO1vFRw/nz
  # Ensures Git never attempts to guess user email and name from the local system but uses your configuration instead.
  useConfigOnly = true
